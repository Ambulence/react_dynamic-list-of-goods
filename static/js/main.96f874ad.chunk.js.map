{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","className","map","good","style","color","name","id","getAll","delay","Promise","resolve","setTimeout","then","fetch","response","json","GoodsType","get5First","sort","prevGood","nextGood","localeCompare","slice","getRedGoods","filter","App","useState","setGoods","loading","setLoading","hasLoadingError","setHasLoadingError","Default","currentGoodsType","setcurrentGoodsType","loadGoods","getGoods","goodsType","loadedGoods","catch","finally","disabled","classNames","type","onClick","All","FirstFive","OnlyRed","ReactDOM","render","document","getElementById"],"mappings":"sPAOaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,oBAAIC,UAAU,OAAd,SACGD,EAAME,KAAI,SAAAC,GAAI,OACb,oBACEF,UAAU,GAEV,UAAQ,OACRG,MAAO,CACLC,MAAOF,EAAKE,OALhB,SAQGF,EAAKG,MANDH,EAAKI,UCHX,SAASC,IACd,OALYC,EAKA,IAJL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAK/CI,MAAK,kBAAMC,MARH,4EASRD,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAP/B,IAAcP,EAUP,ICNFQ,EDMQC,EAAY,WACvB,OAAOV,IACJK,MAAK,SAAAb,GAAK,OAAIA,EAAMmB,MAAK,SAACC,EAAUC,GAAX,OACxBD,EAASd,KAAKgB,cAAcD,EAASf,YAEtCO,MAAK,SAAAb,GAAK,OAAIA,EAAMuB,MAAM,EAAG,OAGrBC,EAAc,WACzB,OAAOhB,IACJK,MAAK,SAAAb,GAAK,OAAIA,EACZyB,QAAO,SAAAtB,GAAI,MAAmB,QAAfA,EAAKE,c,SCjBtBY,K,kBAAAA,E,aAAAA,E,sBAAAA,E,wBAAAA,M,KAOE,IAAMS,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAO3B,EAAP,KAAc4B,EAAd,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA8CH,oBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KACA,EAAgDL,mBAASV,EAAUgB,SAAnE,mBAAOC,EAAP,KAAyBC,EAAzB,KAEMC,EAAY,SAChBC,GAEI,IADJC,EACG,uDADSrB,EAAUgB,QAElBK,IAAcJ,IAIlBJ,GAAW,GACXE,GAAmB,GAEnBK,IACGxB,MAAK,SAAC0B,GAAD,OAAiBX,EAASW,MAC/BC,OAAM,kBAAMR,GAAmB,MAC/BS,SAAQ,kBAAMX,GAAW,MAE5BK,EAAoBG,KAGtB,OACE,sBAAKrC,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,mCAEA,wBACEyC,SAAUb,EACV5B,UAAW0C,IACT,SACA,UACA,CAAE,aAAcd,IAElBe,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMT,EAAU5B,EAAQS,EAAU6B,MAT7C,4BAcA,wBACEJ,SAAUb,EACV5B,UAAW0C,IACT,SACA,UACA,CAAE,aAAcd,IAElBe,KAAK,SACL,UAAQ,oBACRC,QAAS,kBAAMT,EAAUlB,EAAWD,EAAU8B,YAThD,gCAcA,wBACEL,SAAUb,EACV5B,UAAW0C,IACT,SACA,UACA,CAAE,aAAcd,IAElBe,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMT,EAAUZ,EAAaP,EAAU+B,UATlD,4BAaA,cAAC,EAAD,CAAWhD,MAAOA,IAEjB+B,GACC,qBAAK9B,UAAU,yBAAf,qDCtFRgD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.96f874ad.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul className=\"list\">\n    {goods.map(good => (\n      <li\n        className=\"\"\n        key={good.id}\n        data-cy=\"good\"\n        style={{\n          color: good.color,\n        }}\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getAll(): Promise<Good[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods.sort((prevGood, nextGood) => (\n      prevGood.name.localeCompare(nextGood.name)\n    )))\n    .then(goods => goods.slice(0, 5)); // sort and get the first 5\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods\n      .filter(good => good.color === 'red')); // get only red\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport classNames from 'classnames';\nimport 'bulma';\nimport { GoodsList } from './GoodsList';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\nimport { Good } from './types/Good';\n\nenum GoodsType {\n  Default = 'default',\n  All = 'getAll',\n  FirstFive = 'firstFive',\n  OnlyRed = 'onlyRedColor',\n}\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [currentGoodsType, setcurrentGoodsType] = useState(GoodsType.Default);\n\n  const loadGoods = (\n    getGoods: () => Promise<Good[]>,\n    goodsType = GoodsType.Default,\n  ) => {\n    if (goodsType === currentGoodsType) {\n      return;\n    }\n\n    setLoading(true);\n    setHasLoadingError(false);\n\n    getGoods()\n      .then((loadedGoods) => setGoods(loadedGoods))\n      .catch(() => setHasLoadingError(true))\n      .finally(() => setLoading(false));\n\n    setcurrentGoodsType(goodsType);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title is-2\">Dynamic list of Goods</h1>\n\n      <button\n        disabled={loading}\n        className={classNames(\n          'button',\n          'is-link',\n          { 'is-loading': loading },\n        )}\n        type=\"button\"\n        data-cy=\"all-button\"\n        onClick={() => loadGoods(getAll, GoodsType.All)}\n      >\n        Load all goods\n      </button>\n\n      <button\n        disabled={loading}\n        className={classNames(\n          'button',\n          'is-link',\n          { 'is-loading': loading },\n        )}\n        type=\"button\"\n        data-cy=\"first-five-button\"\n        onClick={() => loadGoods(get5First, GoodsType.FirstFive)}\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        disabled={loading}\n        className={classNames(\n          'button',\n          'is-link',\n          { 'is-loading': loading },\n        )}\n        type=\"button\"\n        data-cy=\"red-button\"\n        onClick={() => loadGoods(getRedGoods, GoodsType.OnlyRed)}\n      >\n        Load red goods\n      </button>\n      <GoodsList goods={goods} />\n\n      {hasLoadingError && (\n        <div className=\"notification is-danger\">\n          An error occured when loading data!\n        </div>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}