{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","className","map","good","style","color","name","id","getAll","fetch","then","response","json","GoodsType","get5First","sort","prevGood","nextGood","localeCompare","slice","getRedGoods","filter","App","useState","setGoods","isLoading","setIsLoading","hasLoadingError","setHasLoadingError","Default","currentGoodsType","setCurrentGoodsType","loadGoods","getGoods","goodsType","loadedGoods","catch","finally","checkIsButtonDisabled","buttonType","disabled","All","classNames","type","onClick","FirstFive","OnlyRed","ReactDOM","render","document","getElementById"],"mappings":"sPAOaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,oBAAIC,UAAU,OAAd,SACGD,EAAME,KAAI,SAAAC,GAAI,OACb,oBACEF,UAAU,GAEV,UAAQ,OACRG,MAAO,CACLC,MAAOF,EAAKE,OALhB,SAQGF,EAAKG,MANDH,EAAKI,UCPX,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,ICDFC,EDCQC,EAAY,WACvB,OAAON,IACJE,MAAK,SAAAV,GAAK,OAAIA,EAAMe,MAAK,SAACC,EAAUC,GAAX,OACxBD,EAASV,KAAKY,cAAcD,EAASX,YAEtCI,MAAK,SAAAV,GAAK,OAAIA,EAAMmB,MAAM,EAAG,OAGrBC,EAAc,WACzB,OAAOZ,IACJE,MAAK,SAAAV,GAAK,OAAIA,EACZqB,QAAO,SAAAlB,GAAI,MAAmB,QAAfA,EAAKE,c,SCZtBQ,K,kBAAAA,E,aAAAA,E,sBAAAA,E,wBAAAA,M,KAOE,IAAMS,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAOvB,EAAP,KAAcwB,EAAd,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA8CH,oBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KACA,EAAgDL,mBAASV,EAAUgB,SAAnE,mBAAOC,EAAP,KAAyBC,EAAzB,KAEMC,EAAY,SAChBC,GAEI,IADJC,EACG,uDADSrB,EAAUgB,QAEtBH,GAAa,GACbE,GAAmB,GAEnBK,IACGvB,MAAK,SAACyB,GAAD,OAAiBX,EAASW,MAC/BC,OAAM,kBAAMR,GAAmB,MAC/BS,SAAQ,kBAAMX,GAAa,MAE9BK,EAAoBG,IAGhBI,EAAwB,SAACC,GAAD,OAC5BA,IAAeT,IAAqBH,GAGtC,OACE,sBAAK1B,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,mCAEA,wBACEuC,SAAUF,EAAsBzB,EAAU4B,KAC1CxC,UAAWyC,IACT,SACA,UACA,CAAE,aAAcjB,IAElBkB,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMZ,EAAUxB,EAAQK,EAAU4B,MAT7C,4BAcA,wBACED,SAAUF,EAAsBzB,EAAUgC,WAC1C5C,UAAWyC,IACT,SACA,UACA,CAAE,aAAcjB,IAElBkB,KAAK,SACL,UAAQ,oBACRC,QAAS,kBAAMZ,EAAUlB,EAAWD,EAAUgC,YAThD,gCAcA,wBACEL,SAAUF,EAAsBzB,EAAUiC,SAC1C7C,UAAWyC,IACT,SACA,UACA,CAAE,aAAcjB,IAElBkB,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMZ,EAAUZ,EAAaP,EAAUiC,UATlD,6BAcErB,IAAcE,GACd,cAAC,EAAD,CAAW3B,MAAOA,IAGnB2B,GACC,qBAAK1B,UAAU,yBAAf,qDCzFR8C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.df044769.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul className=\"list\">\n    {goods.map(good => (\n      <li\n        className=\"\"\n        key={good.id}\n        data-cy=\"good\"\n        style={{\n          color: good.color,\n        }}\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods.sort((prevGood, nextGood) => (\n      prevGood.name.localeCompare(nextGood.name)\n    )))\n    .then(goods => goods.slice(0, 5)); // sort and get the first 5\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods\n      .filter(good => good.color === 'red')); // get only red\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport classNames from 'classnames';\nimport 'bulma';\nimport { GoodsList } from './GoodsList';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\nimport { Good } from './types/Good';\n\nenum GoodsType {\n  Default = 'default',\n  All = 'getAll',\n  FirstFive = 'firstFive',\n  OnlyRed = 'onlyRedColor',\n}\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [currentGoodsType, setCurrentGoodsType] = useState(GoodsType.Default);\n\n  const loadGoods = (\n    getGoods: () => Promise<Good[]>,\n    goodsType = GoodsType.Default,\n  ) => {\n    setIsLoading(true);\n    setHasLoadingError(false);\n\n    getGoods()\n      .then((loadedGoods) => setGoods(loadedGoods))\n      .catch(() => setHasLoadingError(true))\n      .finally(() => setIsLoading(false));\n\n    setCurrentGoodsType(goodsType);\n  };\n\n  const checkIsButtonDisabled = (buttonType: GoodsType) => (\n    buttonType === currentGoodsType && !hasLoadingError\n  );\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title is-2\">Dynamic list of Goods</h1>\n\n      <button\n        disabled={checkIsButtonDisabled(GoodsType.All)}\n        className={classNames(\n          'button',\n          'is-link',\n          { 'is-loading': isLoading },\n        )}\n        type=\"button\"\n        data-cy=\"all-button\"\n        onClick={() => loadGoods(getAll, GoodsType.All)}\n      >\n        Load all goods\n      </button>\n\n      <button\n        disabled={checkIsButtonDisabled(GoodsType.FirstFive)}\n        className={classNames(\n          'button',\n          'is-link',\n          { 'is-loading': isLoading },\n        )}\n        type=\"button\"\n        data-cy=\"first-five-button\"\n        onClick={() => loadGoods(get5First, GoodsType.FirstFive)}\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        disabled={checkIsButtonDisabled(GoodsType.OnlyRed)}\n        className={classNames(\n          'button',\n          'is-link',\n          { 'is-loading': isLoading },\n        )}\n        type=\"button\"\n        data-cy=\"red-button\"\n        onClick={() => loadGoods(getRedGoods, GoodsType.OnlyRed)}\n      >\n        Load red goods\n      </button>\n\n      {!isLoading && !hasLoadingError && (\n        <GoodsList goods={goods} />\n      )}\n\n      {hasLoadingError && (\n        <div className=\"notification is-danger\">\n          An error occured when loading data!\n        </div>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}